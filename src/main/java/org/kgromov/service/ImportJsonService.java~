package org.kgromov.weather.archive.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.StopWatch;

import java.io.File;
import java.nio.file.Files;
import java.util.List;

@Service
public class ImportJsonService {
    private static final Logger log = LoggerFactory.getLogger(ImportJsonService.class);

    private final ObjectMapper objectMapper;

    public ImportJsonService(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public <T> T readFromJsonString(String json, Class<T> clazz) {
        try {
            return objectMapper.readValue(json, clazz);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public <T> T readFromJsonFile(File file, TypeReference<T> valueTypeRef) {
        StopWatch stopWatch = new StopWatch();
        try {
            stopWatch.start("readFromJsonFile");
            return objectMapper.readValue(file, valueTypeRef);
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            logTaskExecution(stopWatch);
        }
    }

    public Document readFromJsonStringAsDocument(String json) {
        try {
            return Document.parse(json);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public List<Document> readFromJsonFileAsDocument(File file) {
        StopWatch stopWatch = new StopWatch();
        try {
            stopWatch.start("readFromJsonFileAsDocument");
            return Files.readAllLines(file.toPath()).stream().map(Document::parse).toList();
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            logTaskExecution(stopWatch);
        }
    }

    private void logTaskExecution(StopWatch stopWatch) {
        stopWatch.stop();
        var task = stopWatch.lastTaskInfo();
        log.info("{} takes {} ms", task.getTaskName(), task.getTimeMillis());
    }
}
